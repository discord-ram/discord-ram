from __future__ import annotations

import enum
import typing
from collections.abc import Sequence

__all__: Sequence[str] = ("Intents",)


@typing.final
class Intents(enum.Flag):
    NONE = 0

    GUILDS = 1 << 0

    GUILD_MEMBERS = 1 << 1
    GUILD_MODERATION = 1 << 2
    GUILD_EMOJIS = 1 << 3
    GUILD_INTEGRATIONS = 1 << 4
    GUILD_WEBHOOKS = 1 << 5
    GUILD_INVITES = 1 << 6
    GUILD_VOICE_STATES = 1 << 7
    GUILD_PRESENCES = 1 << 8
    GUILD_MESSAGES = 1 << 9
    GUILD_MESSAGE_REACTIONS = 1 << 10
    GUILD_MESSAGE_TYPING = 1 << 11

    DM_MESSAGES = 1 << 12
    DM_MESSAGE_REACTIONS = 1 << 13
    DM_MESSAGE_TYPING = 1 << 14

    MESSAGE_CONTENT = 1 << 15
    GUILD_SCHEDULED_EVENTS = 1 << 16

    AUTO_MODERATION_CONFIGURATION = 1 << 20
    AUTO_MODERATION_EXECUTION = 1 << 21

    GUILD_MESSAGE_POLLS = 1 << 24
    DIRECT_MESSAGE_POLLS = 1 << 25

    ALL_GUILDS_UNPRIVILEGED = (
        GUILDS
        | GUILD_EMOJIS
        | GUILD_INTEGRATIONS
        | GUILD_WEBHOOKS
        | GUILD_INVITES
        | GUILD_VOICE_STATES
        | GUILD_MESSAGES
        | GUILD_MESSAGE_REACTIONS
        | GUILD_MESSAGE_TYPING
        | GUILD_MODERATION
        | GUILD_SCHEDULED_EVENTS
        | GUILD_MESSAGE_POLLS
    )
    ALL_GUILDS_PRIVILEGED = GUILD_MEMBERS | GUILD_PRESENCES
    ALL_GUILDS = ALL_GUILDS_UNPRIVILEGED | ALL_GUILDS_PRIVILEGED
    ALL_DMS = DM_MESSAGES | DM_MESSAGE_TYPING | DM_MESSAGE_REACTIONS | DIRECT_MESSAGE_POLLS
    ALL_MESSAGES = DM_MESSAGES | GUILD_MESSAGES
    ALL_POLLS = GUILD_MESSAGE_POLLS | DIRECT_MESSAGE_POLLS
    ALL_MESSAGE_REACTIONS = DM_MESSAGE_REACTIONS | GUILD_MESSAGE_REACTIONS
    ALL_MESSAGE_TYPING = DM_MESSAGE_TYPING | GUILD_MESSAGE_TYPING
    ALL_AUTO_MODERATION = AUTO_MODERATION_CONFIGURATION | AUTO_MODERATION_EXECUTION
    ALL_UNPRIVILEGED = ALL_GUILDS_UNPRIVILEGED | ALL_DMS | ALL_AUTO_MODERATION
    ALL_PRIVILEGED = ALL_GUILDS_PRIVILEGED | MESSAGE_CONTENT
    ALL = ALL_UNPRIVILEGED | ALL_PRIVILEGED

    @property
    def is_privileged(self) -> bool:
        return bool(self & self.ALL_PRIVILEGED)
